{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Page","styled","div","Title","MessageForm","form","MessageTextArea","textarea","SubmitButton","button","MessageList","MessageContainer","MessageHead","MessageAuthor","MessageTime","MessageBody","ErrorMessage","Loading","Message","author","time","children","App","useState","messages","setMessages","messageApiError","setMessageApiError","value","setValue","postMessageError","setPostMessageError","isLoadingPostMessage","setIsLoadingPostMessage","fetchMessages","fetch","then","result","json","data","catch","err","message","useEffect","onSubmit","e","preventDefault","method","headers","body","JSON","stringify","nickname","res","ok","onChange","target","onFocus","rows","toString","length","map","Date","createdAt","toLocaleString","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"40DAIA,IAEMA,EAAOC,IAAOC,IAAV,KAKJC,EAAQF,IAAOC,IAAV,KAKLE,EAAcH,IAAOI,KAAV,KAIXC,EAAkBL,IAAOM,SAAV,KAKfC,EAAeP,IAAOQ,OAAV,KAIZC,EAAcT,IAAOC,IAAV,KAIXS,EAAmBV,IAAOC,IAAV,KAUhBU,EAAcX,IAAOC,IAAV,KAQXW,EAAgBZ,IAAOC,IAAV,KAKbY,EAAcb,IAAOC,IAAV,KAEXa,EAAcd,IAAOC,IAAV,KAKXc,EAAef,IAAOC,IAAV,KAKZe,EAAUhB,IAAOC,IAAV,KAcb,SAASgB,EAAT,GAA8C,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAC/B,OACE,eAACV,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,UAAgBM,IAChB,cAACL,EAAD,UAAcM,OAEhB,cAACL,EAAD,UAAcM,OAiGLC,MAtFf,WAAgB,IAAD,EACmBC,mBAAS,MAD5B,mBACNC,EADM,KACIC,EADJ,OAEiCF,mBAAS,MAF1C,mBAENG,EAFM,KAEWC,EAFX,OAGaJ,qBAHb,mBAGNK,EAHM,KAGCC,EAHD,OAImCN,qBAJnC,mBAINO,EAJM,KAIYC,EAJZ,OAK2CR,oBAAS,GALpD,mBAKNS,EALM,KAKgBC,EALhB,KAOPC,EAAgB,WACpB,OAAOC,MAxGU,2EAyGhBC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GACJd,EAAYc,MAEbC,OAAM,SAAAC,GACLd,EAAmBc,EAAIC,aA8C3B,OAJAC,qBAAU,WACRT,MACC,IAGD,eAAClC,EAAD,WACGgC,GAAwB,cAACf,EAAD,yBACzB,cAACd,EAAD,iCACA,eAACC,EAAD,CAAawC,SAtCQ,SAACC,GACxBA,EAAEC,iBACEd,IACJC,GAAwB,GACxBE,MAAM,8CAA+C,CACnDY,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAU,OACVH,KAAMrB,MAGTQ,MAAK,SAACiB,GAAD,OAASA,EAAIf,UAClBF,MAAK,SAACG,GACLN,GAAwB,GACR,IAAZM,EAAKe,IAITzB,EAAS,IACTK,KAJEH,EAAoBQ,EAAKG,YAM5BF,OAAM,SAACC,GACNR,GAAwB,GACxBF,EAAoBU,EAAIC,cAYxB,UACE,cAACpC,EAAD,CAAiBsB,MAAOA,EAAO2B,SA/CR,SAAAV,GAC3BhB,EAASgB,EAAEW,OAAO5B,QA8CiD6B,QA3CzC,WAC1B1B,EAAoB,OA0C6E2B,KAAM,KACnG,cAAClD,EAAD,uCACCsB,GAAoB,cAACd,EAAD,UAAec,OAErCJ,GACD,eAACV,EAAD,oCACyBU,EAAgBiC,cAGzC,eAACjD,EAAD,WACGc,GAAgC,IAApBA,EAASoC,QAAgB,6CACrCpC,GAAYA,EAASqC,KAAI,SAAAnB,GAAO,OAC/B,cAACxB,EAAD,CAA0BC,OAAQuB,EAAQU,SAAUhC,KAAM,IAAI0C,KAAKpB,EAAQqB,WAAWC,iBAAtF,SACGtB,EAAQO,MADGP,EAAQuB,cCrKjBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.08c20cb6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from 'prop-types';\n\nconst API_ENDPOINT = 'https://student-json-api.lidemy.me/comments?_sort=createdAt&_order=desc';\n\nconst Page = styled.div`\n  width: 360px;\n  margin: 0 auto;\n`;\n\nconst Title = styled.div`\n  color: black;\n  margin-top: 10%;\n`;\n\nconst MessageForm = styled.form`\n  margin-top: 16px;\n`;\n\nconst MessageTextArea = styled.textarea`\n  display: block;\n  width: 100%;\n`;\n\nconst SubmitButton = styled.button`\n  margin-top: 8px;\n`;\n\nconst MessageList = styled.div`\n  margin-top: 16px;\n`;\n\nconst MessageContainer = styled.div`\n  border: 1px solid black;\n  padding: 8px 16px;\n  border-radius: 8px;\n\n  & + & {\n    margin-top: 8px;\n  }\n`;\n\nconst MessageHead = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-bottom: 4px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.3);\n`;\n\nconst MessageAuthor = styled.div`\n  color: black;\n  font-size: 14px;\n`;\n\nconst MessageTime = styled.div``;\n\nconst MessageBody = styled.div`\n  margin-top:16px;\n  font-size: 16px;\n`;\n\nconst ErrorMessage = styled.div`\n  margin-top: 16px;\n  color: red;\n`;\n\nconst Loading = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  font-size: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nfunction Message({ author, time, children }) {\n  return (\n    <MessageContainer>\n      <MessageHead>\n        <MessageAuthor>{author}</MessageAuthor>\n        <MessageTime>{time}</MessageTime>\n      </MessageHead>\n      <MessageBody>{children}</MessageBody>\n    </MessageContainer>\n  )\n};\n\nMessage.propTypes = {\n  author: PropTypes.string,\n  time: PropTypes.string,\n  children: PropTypes.node,\n}\n\nfunction App() {\n  const [messages, setMessages] = useState(null);\n  const [messageApiError, setMessageApiError] = useState(null);\n  const [value, setValue] = useState();\n  const [postMessageError, setPostMessageError] = useState();\n  const [isLoadingPostMessage, setIsLoadingPostMessage] = useState(false);\n\n  const fetchMessages = () => {\n    return fetch(API_ENDPOINT)\n    .then(result => result.json())\n    .then(data => {\n      setMessages(data);\n    })\n    .catch(err => {\n      setMessageApiError(err.message)\n    });\n  }\n\n  const handleTextareaChange = e => {\n    setValue(e.target.value)\n  }\n\n  const handleTextareaFocus = () => {\n    setPostMessageError(null)\n  }\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    if (isLoadingPostMessage) return;\n    setIsLoadingPostMessage(true);\n    fetch('https://student-json-api.lidemy.me/comments', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        nickname: 'huli',\n        body: value,\n      }),\n    })\n    .then((res) => res.json())\n    .then((data) => {\n      setIsLoadingPostMessage(false);\n      if (data.ok === 0) {\n        setPostMessageError(data.message);\n        return;\n      }\n      setValue(\"\");\n      fetchMessages();\n    })\n    .catch((err) => {\n      setIsLoadingPostMessage(false);\n      setPostMessageError(err.message);\n    });\n  };\n\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  return (\n    <Page>\n      {isLoadingPostMessage && <Loading>Loading...</Loading>}\n      <Title>留言板</Title>\n      <MessageForm onSubmit={handleFormSubmit}>\n        <MessageTextArea value={value} onChange={handleTextareaChange} onFocus={handleTextareaFocus} rows={10} />\n        <SubmitButton>送出留言</SubmitButton>\n        {postMessageError && <ErrorMessage>{postMessageError}</ErrorMessage>}\n      </MessageForm>\n      {messageApiError && (\n      <ErrorMessage>\n        Something went wrong. {messageApiError.toString()}\n      </ErrorMessage>\n      )}\n      <MessageList>\n        {messages && messages.length === 0 && <div>No Message</div>}\n        {messages && messages.map(message => (\n          <Message key={message.id} author={message.nickname} time={new Date(message.createdAt).toLocaleString()}>\n            {message.body}\n          </Message>\n        ))}\n      </MessageList>\n    </Page>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}